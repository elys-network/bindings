{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ElysMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "amm"
      ],
      "properties": {
        "amm": {
          "$ref": "#/definitions/AmmMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AmmMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "msg_swap_exact_amount_in"
          ],
          "properties": {
            "msg_swap_exact_amount_in": {
              "type": "object",
              "required": [
                "routes",
                "sender",
                "token_in",
                "token_out_min_amount"
              ],
              "properties": {
                "meta_data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "routes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SwapAmountInRoute"
                  }
                },
                "sender": {
                  "type": "string"
                },
                "token_in": {
                  "$ref": "#/definitions/Coin"
                },
                "token_out_min_amount": {
                  "$ref": "#/definitions/Int128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "msg_open"
          ],
          "properties": {
            "msg_open": {
              "type": "object",
              "required": [
                "borrow_asset",
                "collateral_amount",
                "collateral_asset",
                "creator",
                "leverage",
                "position",
                "take_profit_price"
              ],
              "properties": {
                "borrow_asset": {
                  "type": "string"
                },
                "collateral_amount": {
                  "$ref": "#/definitions/Int128"
                },
                "collateral_asset": {
                  "type": "string"
                },
                "creator": {
                  "type": "string"
                },
                "leverage": {
                  "$ref": "#/definitions/Decimal"
                },
                "meta_data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "position": {
                  "type": "integer",
                  "format": "int32"
                },
                "take_profit_price": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "msg_close"
          ],
          "properties": {
            "msg_close": {
              "type": "object",
              "required": [
                "creator",
                "id"
              ],
              "properties": {
                "creator": {
                  "type": "string"
                },
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "meta_data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Int128": {
      "description": "An implementation of i128 that is using strings for JSON encoding/decoding, such that the full i128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i128` to get the value out:\n\n``` # use cosmwasm_std::Int128; let a = Int128::from(258i128); assert_eq!(a.i128(), 258); ```",
      "type": "string"
    },
    "SwapAmountInRoute": {
      "type": "object",
      "required": [
        "pool_id",
        "token_out_denom"
      ],
      "properties": {
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_out_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
