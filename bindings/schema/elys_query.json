{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ElysQuery",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "oracle"
      ],
      "properties": {
        "oracle": {
          "$ref": "#/definitions/OracleQuery"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "amm"
      ],
      "properties": {
        "amm": {
          "$ref": "#/definitions/AmmQuery"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AmmQuery": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "query_swap_estimation"
          ],
          "properties": {
            "query_swap_estimation": {
              "type": "object",
              "required": [
                "routes",
                "token_in"
              ],
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SwapAmountInRoute"
                  }
                },
                "token_in": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "OracleQuery": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "price_all"
          ],
          "properties": {
            "price_all": {
              "type": "object",
              "required": [
                "pagination"
              ],
              "properties": {
                "pagination": {
                  "$ref": "#/definitions/PageRequest"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "asset_info"
          ],
          "properties": {
            "asset_info": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PageRequest": {
      "type": "object",
      "required": [
        "count_total",
        "limit",
        "reverse"
      ],
      "properties": {
        "count_total": {
          "type": "boolean"
        },
        "key": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "offset": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "reverse": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "SwapAmountInRoute": {
      "type": "object",
      "required": [
        "pool_id",
        "token_out_denom"
      ],
      "properties": {
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_out_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
